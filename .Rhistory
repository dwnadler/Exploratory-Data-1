run_Analysis.R
getwd()
# Check if the user has already unzipped teh file
if(!file.exists(targetFolder)) {
# Do they at least have the zip file?
if(!file.exists(filename)) {
# They don't have the zip file, so downlaod it
download.file(
'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
filename
)
}
# Now, unzip the file
unzip(filename)
}
# Read in the data into the test and training sets
test.data <- read.table(file.path(targetFolder, 'test', 'X_test.txt'))
# Initialize some initial values
targetFolder <- '/Users/davidnadler/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project/'
filename <- 'getdata_dataset.zip'
# Check to see if the user has the "reshape2" package installed (this script relies on it)
if(!library(reshape2, logical.return = TRUE)) {
# It didn't exist, so install the package, and then load it
install.packages('reshape2')
library(reshape2)
}
# Initialize some initial values
targetFolder <- '/Users/davidnadler/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project/'
filename <- 'getdata_dataset.zip'
# Check if the user has already unzipped teh file
if(!file.exists(targetFolder)) {
# Do they at least have the zip file?
if(!file.exists(filename)) {
# They don't have the zip file, so downlaod it
download.file(
'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
filename
)
}
# Now, unzip the file
unzip(filename)
}
# 1. Merges the training and the test sets to create one data set.
# Read in the data into the test and training sets
test.data <- read.table(file.path(targetFolder, 'test', 'X_test.txt'))
test.activities <- read.table(file.path(targetFolder, 'test', 'y_test.txt'))
test.subjects <- read.table(file.path(targetFolder, 'test', 'subject_test.txt'))
train.data <- read.table(file.path(targetFolder, 'train', 'X_train.txt'))
train.activities <- read.table(file.path(targetFolder, 'train', 'y_train.txt'))
train.subjects <- read.table(file.path(targetFolder, 'train', 'subject_train.txt'))
# Bind the rows for each of the data sets together
data.data <- rbind(train.data, test.data)
data.activities <- rbind(train.activities, test.activities)
data.subjects <- rbind(train.subjects, test.subjects)
# Now combine all of of the different columns together into one table
full_data <- cbind(data.subjects, data.activities, data.data)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Grab the complete list of features
features <- read.table(file.path(targetFolder, 'features.txt'))
# Filter to the features we want
requiredFeatures <- features[grep('-(mean|std)\\(\\)', features[, 2 ]), 2]
full_data <- full_data[, c(1, 2, requiredFeatures)]
# 3. Uses descriptive activity names to name the activities in the data set
# Read in the activity labels
activities <- read.table(file.path(targetFolder, 'activity_labels.txt'))
# Update the activity name
full_data[, 2] <- activities[full_data[,2], 2]
# 4. Appropriately labels the data set with descriptive variable names.
colnames(full_data) <- c(
'subject',
'activity',
# Remove the brackets from the features columns
gsub('\\-|\\(|\\)', '', as.character(requiredFeatures))
)
# Coerce the data into strings
full_data[, 2] <- as.character(full_data[, 2])
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Melt the data so we have a unique row for each combination of subject and acitivites
final.melted <- melt(full_data, id = c('subject', 'activity'))
# Cast it getting the mean value
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
# Emit the data out to a file
write.table(final.mean, file=file.path("tidy.txt"), row.names = FALSE, quote = FALSE)
# Check to see if the user has the "reshape2" package installed (this script relies on it)
if(!library(reshape2, logical.return = TRUE)) {
# It didn't exist, so install the package, and then load it
install.packages('reshape2')
library(reshape2)
}
# Initialize some initial values
targetFolder <- 'UCI HAR Dataset'
filename <- 'getdata_dataset.zip'
# Check if the user has already unzipped teh file
if(!file.exists(targetFolder)) {
# Do they at least have the zip file?
if(!file.exists(filename)) {
# They don't have the zip file, so downlaod it
download.file(
'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
filename
)
}
# Now, unzip the file
unzip(filename)
}
# 1. Merges the training and the test sets to create one data set.
# Read in the data into the test and training sets
test.data <- read.table(file.path(targetFolder, 'test', 'X_test.txt'))
test.activities <- read.table(file.path(targetFolder, 'test', 'y_test.txt'))
test.subjects <- read.table(file.path(targetFolder, 'test', 'subject_test.txt'))
train.data <- read.table(file.path(targetFolder, 'train', 'X_train.txt'))
train.activities <- read.table(file.path(targetFolder, 'train', 'y_train.txt'))
train.subjects <- read.table(file.path(targetFolder, 'train', 'subject_train.txt'))
# Bind the rows for each of the data sets together
data.data <- rbind(train.data, test.data)
data.activities <- rbind(train.activities, test.activities)
data.subjects <- rbind(train.subjects, test.subjects)
# Now combine all of of the different columns together into one table
full_data <- cbind(data.subjects, data.activities, data.data)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Grab the complete list of features
features <- read.table(file.path(targetFolder, 'features.txt'))
# Filter to the features we want
requiredFeatures <- features[grep('-(mean|std)\\(\\)', features[, 2 ]), 2]
full_data <- full_data[, c(1, 2, requiredFeatures)]
# 3. Uses descriptive activity names to name the activities in the data set
# Read in the activity labels
activities <- read.table(file.path(targetFolder, 'activity_labels.txt'))
# Update the activity name
full_data[, 2] <- activities[full_data[,2], 2]
# 4. Appropriately labels the data set with descriptive variable names.
colnames(full_data) <- c(
'subject',
'activity',
# Remove the brackets from the features columns
gsub('\\-|\\(|\\)', '', as.character(requiredFeatures))
)
# Coerce the data into strings
full_data[, 2] <- as.character(full_data[, 2])
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Melt the data so we have a unique row for each combination of subject and acitivites
final.melted <- melt(full_data, id = c('subject', 'activity'))
# Cast it getting the mean value
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
# Emit the data out to a file
write.table(final.mean, file=file.path("tidy.txt"), row.names = FALSE, quote = FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(swirl)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help("package = lubridate)
help("package = lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
month(this_day)
wday(4)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd(" 1975 March 12")
mdy("March 12, 1975")
parse(25081985)
mdy(25081985)
dmy(25081985)
ymd('192012')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(c("2014-05-14", "2014-09-22", "2014-07-11"))
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds =55)
this_moment
update(this_moment, now())
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
depart <- depart + 15 hours + 50 minutes
depart = depart + 15 hours + 50 minutes
depart = depart + 15 hours + 50 minutes
arrive <- depart + 15 hours + 50 minutes
arrive=depart + 15 hours + 50 minutes
arrive <- depart + hours(15)+minutes(50)
?with_tz
tz("Asia/Hong_Kong")
arrive <- tz("Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <-
?
mdy("June 17, 2008")
mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
install_course("Exploratory_Data_Analysis")
swirl()
2
swirl(),
case = action
)
swirl()
swirl()
swirl()
1
swirl()
install.packages("ggplot2")
swirl()
``
1
swirl()
swirl()
swirl()
swirl()
head(pollution)
dim(pollution)
head(pollution$pm25)
summary(pollutant$pm25)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxpolt(ppm, color = "blue")
boxplot(ppm, color = "blue")
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col-"green", breaks = 100)
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col="magenta")
abline(v = median(ppm), col="magenta", lwd=4)
names(pollution)
table(region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main ' "Number of Counties in Each Region')
barplot(reg, col="wheat", main = "Number of Counties in Each Region')
barplot(reg, col="wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(pm25, col="green")
hist(east$pm25, col="green")
hist(west$pm25, col="green")
west <- subset(pollution, region == "west")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(call(pollution), latitude, pm25)
plot(latitude, pm25)
plot(latitude~pm25)
call(pollution,plot(latitude, pm25))
with(pollution, call(plot(latitude, pm25)))
with(pollution$, call(plot(latitude, pm25)))
with(pollution, call(plot(latitude, pm25)))
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "West"))
west <- subset(pollution,region=="west")
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "West"))
plot(west$latitude, west$pm25, main = "West")
with(subset(pollution, region == "east"), plot(latitude, pm25, main = "East"))
plot(east$latitude, east$pm25, main = "East")
swirl()
?Devices
plot(faithful$eruptions, faithful$waiting)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed, max(cars$dist, "SWIRL rules!")))
text(mean(cars$speed, cars$dist))
text(mean(cars$speed, cars$dist))
text(mean(cars$speed, cars$dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
swirl()
swirl()
swirl()
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab = "red", main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
swirl()
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Ozone and Wind in New York City")
title(main="Wind and Ozone in NYC")
may <- subset(airquality$Month == "5")
may <- subset.default(airquality$Month == "5")
may <- airquality$Month == "5"
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
plot(notmay$Wind, notmay$Ozone)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
lot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
getwd()
setwd("~/Documents/GitHub/Exploratory-Data-1")
d <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings = "?", colClasses = c('character','character','numeric','numeric','numeric','numeric','numeric','numeric','numeric'))
d <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings = "?", colClasses = c('character','character','numeric','numeric','numeric','numeric','numeric','numeric','numeric'))
## Format date to Type Date
d$Date <- as.Date(d$Date, "%d/%m/%Y")
## Filter data set from Feb. 1, 2007 to Feb. 2, 2007
d <- subset(d,Date >= as.Date("2007-2-1") & Date <= as.Date("2007-2-2"))
## Remove incomplete observation
d <- d[complete.cases(d),]
## Combine Date and Time column
dateTime <- paste(d$Date, d$Time)
## Name the vector
dateTime <- setNames(dateTime, "DateTime")
## Remove Date and Time column
d <- d[ ,!(names(d) %in% c("Date","Time"))]
## Add DateTime column
d <- cbind(dateTime, d)
## Format dateTime Column
d$dateTime <- as.POSIXct(dateTime)
hist(d$Global_active_power, main="Global Active Power", xlab = "Global Active Power (kilowatts)", col="red")
